// Code generated by gobind. DO NOT EDIT.

// Java class libv2ray.V2RayPoint is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/2dust/AndroidLibXrayLite
package libv2ray;

import go.Seq;

/**
 * V2RayPoint V2Ray Point Server
This is territory of Go, so no getter and setters!
 */
public final class V2RayPoint implements Seq.Proxy {
	static { Libv2ray.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	/**
	 * NewV2RayPoint new V2RayPoint
	 */
	public V2RayPoint(V2RayVPNServiceSupportsSet s, boolean adns) {
		this.refnum = __NewV2RayPoint(s, adns);
		Seq.trackGoRef(refnum, this);
	}
	
	private static native int __NewV2RayPoint(V2RayVPNServiceSupportsSet s, boolean adns);
	
	V2RayPoint(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public final native V2RayVPNServiceSupportsSet getSupportSet();
	public final native void setSupportSet(V2RayVPNServiceSupportsSet v);
	
	// skipped field V2RayPoint.Vpoint with unsupported type: *github.com/xtls/xray-core/core.Instance
	
	public final native boolean getIsRunning();
	public final native void setIsRunning(boolean v);
	
	public final native String getDomainName();
	public final native void setDomainName(String v);
	
	public final native String getConfigureFileContent();
	public final native void setConfigureFileContent(String v);
	
	public final native boolean getAsyncResolve();
	public final native void setAsyncResolve(boolean v);
	
	// skipped field V2RayPoint.SocksConf with unsupported type: *github.com/hossinasaadi/go-socks5.Config
	
	public native void initSSH(String sshAddress, String socks5Address, String sshUser, String sshPass);
	public native long measureDelay(String endpoint, long timeout) throws Exception;
	/**
	 * Delegate Funcation
	 */
	public native long queryStats(String tag, String direct);
	/**
	 * RunLoop Run V2Ray main loop
	 */
	public native void runLoop(boolean prefIPv6) throws Exception;
	/**
	 * StopLoop Stop V2Ray main loop
	 */
	public native void stopLoop() throws Exception;
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof V2RayPoint)) {
		    return false;
		}
		V2RayPoint that = (V2RayPoint)o;
		V2RayVPNServiceSupportsSet thisSupportSet = getSupportSet();
		V2RayVPNServiceSupportsSet thatSupportSet = that.getSupportSet();
		if (thisSupportSet == null) {
			if (thatSupportSet != null) {
			    return false;
			}
		} else if (!thisSupportSet.equals(thatSupportSet)) {
		    return false;
		}
		// skipped field V2RayPoint.Vpoint with unsupported type: *github.com/xtls/xray-core/core.Instance
		
		boolean thisIsRunning = getIsRunning();
		boolean thatIsRunning = that.getIsRunning();
		if (thisIsRunning != thatIsRunning) {
		    return false;
		}
		String thisDomainName = getDomainName();
		String thatDomainName = that.getDomainName();
		if (thisDomainName == null) {
			if (thatDomainName != null) {
			    return false;
			}
		} else if (!thisDomainName.equals(thatDomainName)) {
		    return false;
		}
		String thisConfigureFileContent = getConfigureFileContent();
		String thatConfigureFileContent = that.getConfigureFileContent();
		if (thisConfigureFileContent == null) {
			if (thatConfigureFileContent != null) {
			    return false;
			}
		} else if (!thisConfigureFileContent.equals(thatConfigureFileContent)) {
		    return false;
		}
		boolean thisAsyncResolve = getAsyncResolve();
		boolean thatAsyncResolve = that.getAsyncResolve();
		if (thisAsyncResolve != thatAsyncResolve) {
		    return false;
		}
		// skipped field V2RayPoint.SocksConf with unsupported type: *github.com/hossinasaadi/go-socks5.Config
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getSupportSet(), getIsRunning(), getDomainName(), getConfigureFileContent(), getAsyncResolve()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("V2RayPoint").append("{");
		b.append("SupportSet:").append(getSupportSet()).append(",");
		b.append("IsRunning:").append(getIsRunning()).append(",");
		b.append("DomainName:").append(getDomainName()).append(",");
		b.append("ConfigureFileContent:").append(getConfigureFileContent()).append(",");
		b.append("AsyncResolve:").append(getAsyncResolve()).append(",");
		return b.append("}").toString();
	}
}

